// Generated by CoffeeScript 1.4.0
(function() {
  var add_resource_div, compose_id, compose_label, connect, draw_plot, init, load_resource, onClose, onError, onMessage, onOpen, refresh_nodes, register_resource, remove_resource, root, set_close_callback, set_register_callback, set_resize_callback, stat_info, stats_init;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  init = function() {
    if (!("WebSocket" in window)) {
      return console.log("websockets are not supported.");
    } else {
      return connect();
    }
  };

  connect = function() {
    var wsHost;
    wsHost = "ws://" + window.location.host + "/websocket";
    root.websocket = new WebSocket(wsHost);
    root.plots = {};
    root.datas = {};
    console.log("connecting to: " + wsHost);
    root.websocket.onopen = function(evt) {
      return onOpen(evt);
    };
    root.websocket.onclose = function(evt) {
      return onClose(evt);
    };
    root.websocket.onmessage = function(evt) {
      return onMessage(evt);
    };
    return root.websocket.onerror = function(evt) {
      return onError(evt);
    };
  };

  onOpen = function(evt) {
    return console.log("connected");
  };

  onClose = function(evt) {
    return console.log("disconnected");
  };

  onError = function(evt) {
    return console.log("error occured");
  };

  onMessage = function(evt) {
    var commands, obj;
    obj = jQuery.parseJSON(evt.data);
    commands = {
      refresh_nodes: refresh_nodes,
      stats_init: stats_init,
      stat_info: stat_info
    };
    return commands[obj.command](obj.params);
  };

  stat_info = function(params) {
    var plot, series, stat_div, stat_id;
    stat_id = compose_id(params.node, params.name);
    stat_div = $("#" + stat_id);
    if (stat_div.length) {
      params.val[0] = new Date(params.val[0] / 1000);
      plot = root.plots[stat_id];
      series = root.datas[stat_id];
      series.data.push(params.val);
      series.data.shift();
      plot.setData([series]);
      plot.setupGrid();
      return plot.draw();
    }
  };

  compose_id = function(node, resource) {
    return "id_" + CryptoJS.MD5(node + resource);
  };

  compose_label = function(node, resource, suffix) {
    return node + ": " + resource + " (" + suffix + ")";
  };

  stats_init = function(params) {
    return load_resource(params.node, params.resource, params.stats, params.suffix);
  };

  set_close_callback = function(stat_div, node, resource) {
    return stat_div.find(".btn-close").on("click", function(e) {
      stat_div.remove();
      return remove_resource(node, resource);
    });
  };

  load_resource = function(node, resource, stats, suffix) {
    var label, ret, stat_div, stat_id;
    stat_id = compose_id(node, resource);
    if ($("#" + stat_id).length === 0) {
      stat_div = add_resource_div(node, resource);
      label = compose_label(node, resource, suffix);
      ret = draw_plot(stat_div, stats, label);
      set_close_callback(stat_div, node, resource);
      root.plots[stat_id] = ret.plot;
      return root.datas[stat_id] = ret.data;
    }
  };

  set_resize_callback = function(stat_div, container, plot) {
    return stat_div.resize(function() {
      container.css("height", stat_div.height() - 30);
      plot.resize();
      plot.setupGrid();
      return plot.draw();
    });
  };

  add_resource_div = function(node, resource) {
    var tpl_stat;
    tpl_stat = $("#tpl_resource_container > :first-child").clone();
    tpl_stat.attr("id", compose_id(node, resource));
    $("div.stat-container").append(tpl_stat);
    return tpl_stat;
  };

  draw_plot = function(stat_div, stats, label) {
    var container, data, options, plot;
    stats = _.map(stats, function(n) {
      return [new Date(n[0] / 1000), n[1]];
    });
    data = {
      label: label,
      lines: {
        show: true,
        fill: true
      },
      points: {
        show: true
      },
      data: stats
    };
    options = {
      xaxis: {
        mode: "time",
        timeformat: "%H:%M:%S",
        minTickSize: [5, "second"]
      }
    };
    container = stat_div.find("div.plot-container");
    plot = $.plot(container, [data], options);
    set_resize_callback(stat_div, container, plot);
    plot.setupGrid();
    plot.draw();
    return {
      plot: plot,
      data: data
    };
  };

  register_resource = function(node, resource) {
    var msg;
    msg = {
      command: "register_resource",
      params: {
        node: node,
        resource: resource
      }
    };
    return root.websocket.send(JSON.stringify(msg));
  };

  remove_resource = function(node, resource) {
    var msg;
    msg = {
      command: "remove_resource",
      params: {
        node: node,
        resource: resource
      }
    };
    return root.websocket.send(JSON.stringify(msg));
  };

  set_register_callback = function(resource_div, node, resource) {
    return resource_div.find("a.resource-link").on("click", function(e) {
      return register_resource(node, resource);
    });
  };

  refresh_nodes = function(nodes) {
    return $("#toplevel ul").append(_.map(nodes, function(val, node) {
      var tpl_node;
      tpl_node = $("#tpl_node_menu > :first-child").clone();
      tpl_node.find("span.node-name").html(node);
      tpl_node.find("ul.submenu").append(_.map(val, function(res) {
        var tpl_resource;
        tpl_resource = $("#tpl_resource_menu > :first-child").clone();
        set_register_callback(tpl_resource, node, res);
        tpl_resource.find("span.resource-name").html(res);
        return tpl_resource;
      }));
      return tpl_node;
    }));
  };

  $(document).ready(init);

}).call(this);
